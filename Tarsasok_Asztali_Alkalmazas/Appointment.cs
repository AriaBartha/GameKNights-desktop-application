// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Tarsasok_Asztali_Alkalmazas;
//
//    var appointment = Appointment.FromJson(jsonString);

namespace Tarsasok_Asztali_Alkalmazas
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Xml.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Appointment
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("appointment")]
        public string AppointmentAppointment { get; set; }

        [JsonProperty("employee_id")]
        public long EmployeeId { get; set; }

        [JsonProperty("booked")]
        public long Booked { get; set; }

        [JsonProperty("guest_id")]
        public long GuestId { get; set; }

        [JsonProperty("board_game_id")]
        public long BoardGameId { get; set; }

        [JsonProperty("number_of_players")]
        public long NumberOfPlayers { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("updated_at")]
        public DateTimeOffset UpdatedAt { get; set; }

        public override string ToString()
        {
            //return AppointmentAppointment.ToString();
            return $"{this.Id} - {this.AppointmentAppointment}";
        }
    }

    public partial class Appointment
    {
        public static Appointment[] FromJson(string json) => JsonConvert.DeserializeObject<Appointment[]>(json, Tarsasok_Asztali_Alkalmazas.Converter.Settings);
    }

    public static class SerializeAppointment
    {
        public static string ToJson(this Appointment[] self) => JsonConvert.SerializeObject(self, Tarsasok_Asztali_Alkalmazas.Converter.Settings);
    }

    internal static class ConverterAppointment
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
